syntax = "proto3";

package proto;

import "gorums.proto";

import "google/protobuf/empty.proto";

option go_package = "github.com/relab/hotstuff/internal/proto";

service FastWendyEC {
  rpc Propose(Block) returns (google.protobuf.Empty) {
    option (gorums.multicast) = true;
  }

  rpc Vote(PartialCert) returns (google.protobuf.Empty) {
    option (gorums.unicast) = true;
  }

  rpc NewView(NewViewMsg) returns (google.protobuf.Empty) {
    option (gorums.unicast) = true;
  }

  rpc Nack(NackMsg) returns (google.protobuf.Empty) {
    option (gorums.unicast) = true;
  }

  rpc ProofNoCommit(ProofNC) returns (google.protobuf.Empty) {
    option (gorums.unicast) = true;
  }
}

message Block {
  bytes ParentHash = 1;
  QuorumCert QC = 2;
  int64 Height = 3;
  repeated Command Commands = 4;
}

message PartialSig {
  int32 ReplicaID = 1;
  bytes R = 2;
  bytes S = 3;
}

message PartialCert {
  PartialSig Sig = 1;
  bytes Hash = 2;
}

message QuorumCert {
  repeated PartialSig Sigs = 1;
  bytes Hash = 2;
}

message AggMessage {
  bytes C = 1;
  bytes V = 2;
}

message NewViewMsg {
  QuorumCert LockCertificate = 1;
  AggMessage Message = 2;
  bytes Signature = 3;
  int32 ReplicaID = 4;
}

message Command { bytes Data = 1; }

message Index {
  int32 ReplicaID = 1;
  bool Exists = 2;
}

// KeyAggMessagePair type
message KeyAggMessagePair {
  repeated bytes PK = 1;
	AggMessage M = 2;
}

message ProofNC {
  repeated KeyAggMessagePair MessagePairs = 1;
  bytes Signature = 2;
  bytes Hash = 3;
}

message NackMsg {
  QuorumCert QC = 1;
  bytes Hash = 2;
}